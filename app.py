# ==============================================================================
# File: app.py
# M√¥ t·∫£: ·ª®ng d·ª•ng Streamlit d·ª± b√°o nhu c·∫ßu b√°n h√†ng cho ABC Manufacturing
# ==============================================================================

import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.linear_model import LinearRegression

# --- C·∫•u h√¨nh trang ---
st.set_page_config(
    page_title="D·ª± b√°o Nhu c·∫ßu ABC",
    page_icon="üìà",
    layout="wide"
)

# --- C√°c h√†m x·ª≠ l√Ω d·ªØ li·ªáu v√† m√¥ h√¨nh ---

# S·ª≠ d·ª•ng cache ƒë·ªÉ kh√¥ng ph·∫£i t·∫°o l·∫°i d·ªØ li·ªáu m·ªói l·∫ßn t∆∞∆°ng t√°c
@st.cache_data
def generate_and_process_data():
    """T·∫°o d·ªØ li·ªáu gi·∫£ l·∫≠p v√† x·ª≠ l√Ω n√≥."""
    np.random.seed(42)
    date_range = pd.date_range(start='2022-01-01', end='2025-09-30', freq='D')
    skus = ['SKU-A01', 'SKU-B02', 'SKU-C03']
    data = []
    for date in date_range:
        month_factor = 1.8 if date.month in [10, 11, 12] else 1 + (date.month - 1) / 12 * 0.5
        time_factor = 1 + (date - date_range[0]).days / len(date_range) * 1.5
        for sku in skus:
            if sku == 'SKU-A01': base_quantity, unit_price = np.random.randint(50, 80), 120
            elif sku == 'SKU-B02': base_quantity, unit_price = np.random.randint(20, 40), 250
            else: base_quantity, unit_price = np.random.randint(5, 15), 500
            quantity = int(base_quantity * month_factor * time_factor * (1 + np.random.rand() * 0.2))
            data.append([date, sku, quantity, unit_price])
    
    df = pd.DataFrame(data, columns=['Date', 'SKU', 'Quantity', 'UnitPrice'])
    df['Date'] = pd.to_datetime(df['Date'])
    df['Month'] = df['Date'].dt.to_period('M')
    monthly_sales = df.groupby(['Month', 'SKU']).agg(TotalQuantity=('Quantity', 'sum')).reset_index()
    monthly_sales['Month'] = monthly_sales['Month'].dt.to_timestamp()
    return monthly_sales

def train_and_forecast(data, sku_to_forecast):
    """Hu·∫•n luy·ªán m√¥ h√¨nh v√† d·ª± b√°o cho m·ªôt SKU c·ª• th·ªÉ."""
    df_model = data[data['SKU'] == sku_to_forecast].copy()
    df_model.set_index('Month', inplace=True)
    
    # Feature Engineering
    df_model['time_index'] = np.arange(len(df_model))
    df_model['month_of_year'] = df_model.index.month
    df_model['lag_1'] = df_model['TotalQuantity'].shift(1)
    df_model['rolling_mean_3'] = df_model['TotalQuantity'].rolling(window=3).mean().shift(1)
    df_model.dropna(inplace=True)
    
    # Hu·∫•n luy·ªán m√¥ h√¨nh
    features = ['time_index', 'month_of_year', 'lag_1', 'rolling_mean_3']
    target = 'TotalQuantity'
    X, y = df_model[features], df_model[target]
    
    model = LinearRegression()
    model.fit(X, y)
    
    # D·ª± b√°o cho t∆∞∆°ng lai
    all_known_data = df_model.copy()
    future_dates = pd.date_range(start='2025-10-01', periods=3, freq='M')
    future_predictions_list = []
    
    for date in future_dates:
        time_index = all_known_data['time_index'].iloc[-1] + 1
        month_of_year = date.month
        lag_1 = all_known_data['TotalQuantity'].iloc[-1]
        rolling_mean_3 = all_known_data['TotalQuantity'].tail(3).mean()
        future_X = pd.DataFrame([[time_index, month_of_year, lag_1, rolling_mean_3]], columns=features)
        prediction = model.predict(future_X)[0]
        future_predictions_list.append(int(prediction))
        new_row = pd.DataFrame({'TotalQuantity': [prediction], 'time_index': [time_index]}, index=[date])
        all_known_data = pd.concat([all_known_data, new_row])
        
    forecast_df = pd.DataFrame({
        'Th√°ng D·ª± B√°o': future_dates.strftime('%Y-%m'),
        'S·ªë L∆∞·ª£ng D·ª± B√°o': future_predictions_list
    })
    
    return forecast_df

# --- Giao di·ªán ng∆∞·ªùi d√πng c·ªßa ·ª©ng d·ª•ng Streamlit ---

st.title("üìà ·ª®ng d·ª•ng D·ª± b√°o Nhu c·∫ßu B√°n h√†ng")
st.write("**Doanh nghi·ªáp:** ABC Manufacturing")
st.write("---")

# T·∫£i v√† x·ª≠ l√Ω d·ªØ li·ªáu
monthly_data = generate_and_process_data()

# Hi·ªÉn th·ªã c√°c ph√¢n t√≠ch t·ªïng quan
st.header("1. Ph√¢n t√≠ch T·ªïng quan D·ªØ li·ªáu L·ªãch s·ª≠")

col1, col2 = st.columns(2)

with col1:
    st.subheader("So s√°nh Hi·ªáu su·∫•t b√°n h√†ng theo SKU")
    fig1, ax1 = plt.subplots(figsize=(8, 5))
    sns.lineplot(ax=ax1, data=monthly_data, x='Month', y='TotalQuantity', hue='SKU', marker='o', ci=None)
    st.pyplot(fig1)

with col2:
    st.subheader("Ph√¢n t√≠ch M√πa v·ª• theo Th√°ng")
    fig2, ax2 = plt.subplots(figsize=(8, 5))
    monthly_data['MonthOfYear'] = monthly_data['Month'].dt.month
    sns.boxplot(ax=ax2, data=monthly_data, x='MonthOfYear', y='TotalQuantity')
    st.pyplot(fig2)

# Ph·∫ßn d·ª± b√°o
st.write("---")
st.header("2. D·ª± b√°o Nhu c·∫ßu cho Qu√Ω T·ªõi")
st.write("Ch·ªçn m·ªôt s·∫£n ph·∫©m v√† nh·∫•n n√∫t ƒë·ªÉ xem d·ª± b√°o nhu c·∫ßu cho 3 th√°ng t·ªõi.")

# L·ª±a ch·ªçn s·∫£n ph·∫©m
sku_options = monthly_data['SKU'].unique()
selected_sku = st.selectbox("Ch·ªçn m·ªôt SKU ƒë·ªÉ d·ª± b√°o:", sku_options)

# N√∫t b·∫•m ƒë·ªÉ ch·∫°y d·ª± b√°o
if st.button(f"üöÄ Ch·∫°y d·ª± b√°o cho {selected_sku}"):
    with st.spinner(f"ƒêang hu·∫•n luy·ªán m√¥ h√¨nh v√† d·ª± b√°o cho {selected_sku}... Vui l√≤ng ch·ªù trong gi√¢y l√°t."):
        # Ch·∫°y m√¥ h√¨nh v√† l·∫•y k·∫øt qu·∫£
        forecast_result = train_and_forecast(monthly_data, selected_sku)
        
        st.success("D·ª± b√°o th√†nh c√¥ng!")
        
        st.subheader(f"B·∫£ng K·∫øt qu·∫£ D·ª± b√°o cho {selected_sku}")
        st.table(forecast_result.style.format({'S·ªë L∆∞·ª£ng D·ª± B√°o': '{:,}'}))
        
        st.info(
            "**ƒê·ªÅ xu·∫•t:** D·ª±a v√†o b·∫£ng tr√™n, b·ªô ph·∫≠n k·∫ø ho·∫°ch c√≥ th·ªÉ ƒë∆∞a ra quy·∫øt ƒë·ªãnh v·ªÅ s·∫£n l∆∞·ª£ng s·∫£n xu·∫•t, "
            "t·ªìn kho v√† k·∫ø ho·∫°ch mua nguy√™n v·∫≠t li·ªáu cho qu√Ω t·ªõi."
        )

st.sidebar.header("Th√¥ng tin d·ª± √°n")
st.sidebar.info(
    "ƒê√¢y l√† ·ª©ng d·ª•ng web demo, s·ª≠ d·ª•ng Streamlit ƒë·ªÉ tri·ªÉn khai m·ªôt m√¥ h√¨nh "
    "khoa h·ªçc d·ªØ li·ªáu d·ª± b√°o nhu c·∫ßu s·∫£n ph·∫©m. ·ª®ng d·ª•ng n√†y gi√∫p chuy·ªÉn ƒë·ªïi "
    "c√°c ph√¢n t√≠ch ph·ª©c t·∫°p th√†nh m·ªôt c√¥ng c·ª• h·ªó tr·ª£ ra quy·∫øt ƒë·ªãnh tr·ª±c quan v√† d·ªÖ s·ª≠ d·ª•ng."
)
